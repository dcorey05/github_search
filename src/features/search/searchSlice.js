import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { searchUsers } from "./searchAPI";

const initialState = {
  items: {},
  incomplete_results: false,
  page: 1,
  pageSize: 10,
  query: "",
  status: "idle",
  total_count: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const executeUserSearch = createAsyncThunk(
  "search/searchUsers",
  async ({ query, page, pageSize }) => {
    console.log("page " + page);
    console.log("pagesize " + pageSize);
    console.log("query " + query);
    const response = await searchUsers(query, page, pageSize);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const counterSlice = createSlice({
  name: "search",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPage: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.page = action.payload;
    },
    setQuery: (state, action) => {
      state.query = action.payload;
    },
    resetResults: (state) => {
      state.items = {};
      state.total_count = 0;
      state.page = 1;
    },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(executeUserSearch.pending, (state, action) => {
        // console.log("execute user pending");
        // console.log(action);
        state.status = "loading";
        // console.log(state);
      })
      .addCase(executeUserSearch.fulfilled, (state, action) => {
        // state = { status: "idle", ...action.payload };
        // console.log(action);
        state.status = "idle";
        state.items[state.page] = action.payload.items;
        state.incomplete_results = action.payload.incomplete_results;
        state.total_count = action.payload.total_count;
        // state.page = 1;

        // state.incomplete_results = action.payload.
        // console.log("execute user fulfilled");
        // console.log(action);
        // state.results = action.payload;
        // console.log(state);
      });
    // .addDefaultCase((state, action) => {
    //   console.log("default case");
    // });
  },
});

export const { resetResults, setPage, setQuery } = counterSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;
export const selectSearchResults = (state) => state.search.items;
export const selectSearchIncompleteResults = (state) =>
  state.search.incomplete_results;
export const selectSearchStatus = (state) => state.search.status;
export const selectSearchTotalCount = (state) => state.search.total_count;
export const selectCurrentPage = (state) => state.search.page;
export const selectPageSize = (state) => state.search.pageSize;
export const selectQuery = (state) => state.search.query;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default counterSlice.reducer;
